# credits: Author: @alco28

substitutions:
  devicename: jura
  friendly_name: Coffee Machine
  device_description: Jura koffiemachine in de Keuken
  time_timezone: "Europe/Amsterdam"
  sampling_period: 10s
  dallas_sampling_period: 30s
  samples: '4'
  decimals: '2'
  uart_tx_pin: D1 
  uart_rx_pin: D2 
  uart_baud_rate: "9600" 
  poll_interval: "30s" 
  
esphome:
  name: $devicename
  comment: ${device_description}
  platformio_options:
    upload_speed: 115200
  name_add_mac_suffix: false

esp8266:
  board: d1_mini
  framework:
    version: dev #fix for "elf2bin.py SyntaxWarning: invalid escape sequence '\s'"

# globals:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
 # domain: .lan

  # Optional manual IP
  # manual_ip:
  #   static_ip: *.*.*.*
  #   gateway: *.*.*.*
  #   subnet: *.*.*.*
    
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: “${friendly_name} Fallback AP"
    password: !secret fallback_ap_password

captive_portal:

logger: # set to wan to reduce SRAM logging errors
  level: WARN
  #level: DEBUG

# debug: # uses a lot of SRAM
#   update_interval: 50s

# ⬇ Enable Home Assistant API ⬇ 
ota:
 platform: esphome 
 password: !secret ota_password

safe_mode:
  num_attempts: 3


#password: !secret api_password
api:
  encryption:
    key: !secret api_key_password


web_server:
  port: 80
  version: 3
  sorting_groups:
    - id: sorting_group_jura_settings
      name: "Jura Settings"
      sorting_weight: 10
    - id: sorting_group_counters
      name: "Counters"
      sorting_weight: 30  
    - id: Coffee_products_menu
      name: "Coffee products menu"
      sorting_weight: 20  


# Enable status LED; very low resolution logging :)
    
status_led:
  
  pin:
    number: D4 # Wemos uses GPIO2 for the built in LED
    inverted: True

uart:
  tx_pin: ${uart_tx_pin} 
  rx_pin: ${uart_rx_pin} 
  baud_rate: ${uart_baud_rate} 
  id: uart_bus

##############################################################################
# Dallas temperature sensor (not default, but added for room temperature)
one_wire:
  - platform: gpio
    pin: D5
##############################################################################

# Use the external component
external_components:
  - source: components

# Configure the Jura Coffee component
jura_coffee:
  uart_id: uart_bus
  update_interval: 60s
  sensors:
    num_single_espresso:
      name: "Single Espresso Count"
      id: single_espresso_count
    num_double_espresso:
      name: "Double Espresso Count"
      id: double_espresso_count
    num_coffee:
      name: "Coffee Count"
      id: coffee_count
    num_double_coffee:
      name: "Double Coffee Count"
      id: double_coffee_count
    num_ristretto:
      name: "Ristretto Count"
      id: ristretto_count
    num_single_capuccino:
      name: "Single Cappuccino Count"
      id: single_cappuccino_count
    num_double_ristretto:
      name: "Double Ristretto Count"
      id: double_ristretto_count
    num_brewunit_movements:
      name: "Brew Unit Movements"
      id: brewunit_movements
    num_clean:
      name: "Cleaning Count"
      id: clean_count
    num_descaling:
      name: "Descaling Count"
      id: descaling_count
    num_coffee_Grounds:
      name: "Coffee Grounds Count"
      id: coffee_grounds_count
  text_sensors:
    tray_status:
      name: "Drip Tray Status"
      id: tray_status1
    tank_status:
      name: "Water Tank Status"
      id: tank_status1

script:
  - id: send_string
    parameters:
      command: string
    then:
      - lambda: |-
          #define MAKE_BYTE(src, hi, lo) (static_cast<uint8_t>(0b01011011 | (((src >> (hi)) & 1) << 5) | (((src >> (lo)) & 1) << 2)))
          for (char c : command) {
            uint8_t bytes[4] = {
                MAKE_BYTE(static_cast<uint8_t>(c), 1, 0),
                MAKE_BYTE(static_cast<uint8_t>(c), 3, 2),
                MAKE_BYTE(static_cast<uint8_t>(c), 5, 4),
                MAKE_BYTE(static_cast<uint8_t>(c), 7, 6)
            };

            for (int i = 0; i < 4; i++) {
              id(uart_bus).write_byte(bytes[i]);
            }
            delay(12);
          }
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]  ## '\r'
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]  ## '\n'
  # - id: reset_coffee_made_counter
  #   then:
  #     - lambda: |-
  #         id(single_coffee_made_counter) = 0;
  #         id(num_coffee).publish_state(id(single_coffee_made_counter));

#   - id: publish_states
#     then:
#       - lambda: |-
#           id(num_coffee).publish_state(id(single_coffee_made_counter));   
             
# interval:
#   - interval: 24h  
#     then:
#       - script.execute: reset_coffee_made_counter


################# CONTROL JURA FROM ESPHOME #################################################################
# UART bytes below have been generated with generate_esphome_jura_yaml.py
# Tested with a Jura Impressa F7 2016
#############################################################################################################

#an01 = ON switch
#fa01 = OFF.
#fa03 = Maintainanace menu
#fa04 = ENTER
#fa05 = Clockwise menu
#fa06 = Counterclock menu
#fa07 = Risoretto
#fa08 = Expresso
#fa09 = make single coffee
#fa0A = Cappuccino
#fa0B = Steam
#fa0C = Hot water

switch:
  - platform: template
    name: 'Coffee Machine'
    icon: "mdi:coffee-maker"
    id: jura_on_off_switch
    web_server:
      sorting_group_id: sorting_group_jura_settings    
    turn_on_action:
      - script.execute: 
          id: send_string
          command: 'AN:01'

    turn_off_action:
      - script.execute: 
          id: send_string
          command: 'FA:01'
    optimistic: true
    assumed_state: true




#################  BUTTONS  ###############################
button:
  - platform: restart
    name: "${devicename} Jura ESP restart"
    entity_category: config 
    web_server:
      sorting_group_id: sorting_group_jura_settings    

  # - platform: template
  #   name: "reset coffe made counter"
  #   icon: "mdi:restart"
  #   on_press:
  #     - script.execute: reset_coffee_made_counter
    # web_server:
    #   sorting_group_id: sorting_group_jura_settings    


  - platform: template
    name: 'jura_menu'
    icon: "mdi:MicrosoftXboxControllerMenu"
    entity_category: config
    id: jura_FA03
    web_server:
      sorting_group_id: sorting_group_jura_settings        
    on_press:
    #turn_on_action:
      - script.execute: 
          id: send_string
          command: 'FA:03'


  - platform: template
    name: 'jura_menu_ENTER'
    icon: "mdi:keyboard-return"
    id: jura_FA04
    web_server:
      sorting_group_id: sorting_group_jura_settings        
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:04'

  - platform: template
    name: 'jura_menu_CCW'
    icon: "mdi:menu-left-outline"
    id: jura_FA05
    web_server:
      sorting_group_id: sorting_group_jura_settings        
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:06'

  - platform: template
    name: 'jura_menu_CW'
    icon: "mdi:menu-right-outline"
    id: jura_FA06
    web_server:
      sorting_group_id: sorting_group_jura_settings        
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:05'

###########################  PRODUCTS  ###############################

  - platform: template
    name: 'Make Risoretto'
    icon: "mdi:coffee-outline"
    id: jura_FA07
    web_server:
      sorting_group_id: Coffee_products_menu 
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:07'

  - platform: template
    name: 'Make Espresso'
    icon: "mdi:coffee-to-go-outline"
    id: jura_FA08
    web_server:
      sorting_group_id: Coffee_products_menu 
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:08'

  - platform: template
    name: 'Make Coffee'
    icon: "mdi:coffee-outline"
    id: jura_FA09
    web_server:
      sorting_group_id: Coffee_products_menu 
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:09'

  - platform: template
    name: 'Make Cappuccino'
    icon: "mdi:glass-mug-variant"
    id: jura_FA0A
    web_server:
      sorting_group_id: Coffee_products_menu 
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:0A'

  - platform: template
    name: 'Make Steam'
    icon: "mdi:pot-steam-outline" 
    id: jura_FA0B
    web_server:
      sorting_group_id: Coffee_products_menu 
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:0B'

  - platform: template
    name: 'Make hot-water'
    icon: "mdi:tea-outline"
    id: jura_FA0C
    web_server:
      sorting_group_id: Coffee_products_menu 
    on_press:
      - script.execute: 
          id: send_string
          command: 'FA:0C'

  - platform: template
    name: 'Type'
    id: jura_TY
    web_server:
     sorting_group_id: Coffee_products_menu 
    on_press:
      - script.execute: 
          id: send_string
          command: 'TY:00'


##############################  SENSORS  ############################
sensor:

#---------------------- Dallas temperature sensor ----------------------
  - platform: dallas_temp   
    id: temperature1
    web_server:
      sorting_group_id: sorting_group_counters 
    address: 0xd901186dcfabff28 
    name: "room temperature"    
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    update_interval: ${dallas_sampling_period}

    filters:
      - filter_out: nan  
      - skip_initial: 1       
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10   
          send_first_at: 10 
      - lambda:  return x * 0.8;

# ---------------------- Uptime and WiFi signal ----------------------
  - platform: uptime
    name: "${friendly_name} Uptime"
    internal: true
    entity_category: diagnostic  
    
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 240s
    entity_category: diagnostic
    internal: true


  # - platform: debug
  #   free:
  #     name: "Heap Free"
  #   fragmentation:
  #     name: "Heap Fragmentation"
  #   block:
  #     name: "Heap Max Block"
  #   loop_time:
  #     name: "Loop Time"
   
#--------------------------------------jura sensor counters --------------------------------------------

  - platform: template
    id: num_single_espresso    
    name: "Single Espressos Made"
    accuracy_decimals: 0
    state_class: total_increasing
    lambda: "return {};"
    filters: 
      - filter_out: nan   
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 

  - platform: template
    id: num_double_espresso
    name: "Double Espressos Made"
    accuracy_decimals: 0
    state_class: total_increasing
    lambda: "return {};"
    filters: 
      - filter_out: nan   
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 
      

  # - platform: template
  #   id: num_coffee
  #   name: "Single Coffees Made"
  #   accuracy_decimals: 0
  #   state_class: total_increasing
  #   lambda: "return {};"  
  #   filters: 
  #     - filter_out: nan    
  #     - skip_initial: 1 
  #     - lambda: |-
  #         id(single_coffee_made_counter) += x;         
  #         return x;
  #   web_server:
  #     sorting_group_id: sorting_group_counters  

      
  - platform: template
    id: num_double_coffee
    name: "Double Coffees Made"
    accuracy_decimals: 0
    state_class: total_increasing    
    lambda: "return {};"
    filters: 
      - filter_out: nan   
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 

  - platform: template
    id: num_ristretto
    name: "Single Ristretto Made"
    state_class: total_increasing   
    accuracy_decimals: 0
    lambda: "return {};"
    filters:
      - filter_out: nan
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 

  - platform: template
    id: num_double_ristretto
    name: "Double Ristretto Made"
    state_class: total_increasing   
    accuracy_decimals: 0
    lambda: "return {};"
    filters:
      - filter_out: nan
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 

  - platform: template
    id: num_single_capuccino
    name: "Single Capuccino Made"
    state_class: total_increasing   
    accuracy_decimals: 0
    lambda: "return {};"
    filters:
      - filter_out: nan
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 


  - platform: template
    id: num_clean
    name: "Cleanings Performed"
    state_class: total_increasing   
    accuracy_decimals: 0
    lambda: "return {};"
    filters: 
      - filter_out: nan   
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 

  - platform: template
    id: num_brewunit_movements
    name: "Brewunit motor movements"
    accuracy_decimals: 0
    lambda: "return {};" 
    filters:
      - filter_out: nan
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 

  - platform: template
    id: num_descaling
    name: "Descalings Performed"
    accuracy_decimals: 0
    lambda: "return {};" 
    filters:
      - filter_out: nan
      - skip_initial: 1
    web_server:
      sorting_group_id: sorting_group_counters 
  # - platform: template
  #   id: num_coffee_Grounds 
  #   update_interval: 2min
  #   accuracy_decimals: 0
  #   state_class: total_increasing   
  #   name: "Coffee grounds in tray"
  #   lambda: |-
  #     return (id(num_coffee).state);
  #   filters: 
  #     - filter_out: nan   
  #     - skip_initial: 1
  #     - lambda: |-
  #         if (x > 20) {
  #           return NAN;  // filter out the values greater than 20, Jura F7 gives warning at 16
  #         }
  #         return x;
    # web_server:
    #   sorting_group_id: sorting_group_counters 

#-------- text sensors for diagnostic purposes ---------------------
text_sensor:
  - platform: version
    name: "${friendly_name} ESPHome version"
    internal: true
    entity_category: diagnostic


  - platform: wifi_info
    ip_address:
      name: IP-adres
      id: ip_adres
      icon: mdi:ip-network
      internal: true
      entity_category: diagnostic
          
    ssid:
      name: Netwerk
      id: netwerk
      icon: mdi:access-point-network
      internal: true
      entity_category: diagnostic

    mac_address:
      name: Mac-adres
      id: mac_adres
      icon: mdi:folder-key-network-outline 
      internal: true
      entity_category: diagnostic
  # - platform: debug
  #   device:
  #     name: "Device Info"
  #   reset_reason:
  #     name: "Reset Reason"  

#---------------------- Jura coffee machine tray and water status ----------------------
  - platform: template
    id: tray_status
    name: "Tray Status"
    lambda: "return {};"
    web_server:
      sorting_group_id: sorting_group_jura_settings     
    
  - platform: template
    id: tank_status
    name: "Water Tank Status"
    lambda: "return {};"
    web_server:
      sorting_group_id: sorting_group_jura_settings 
  

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"
    entity_category: diagnostic

